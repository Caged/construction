#!/usr/bin/env ruby

require 'csv'
require 'pathname'
require 'smarter_csv'
require 'parallel'


out_file = Pathname.new(ARGV[0])
in_file  = Pathname.new('data/csv/permits-small.csv')

out_headers = %w(
  permit
  address
  address_id
  type
  description
  issue_date
  final_date
  latest_activity
  status
  activity_type
  activities
  must_check
  activity_status
  last_activity
  completed
)

@out_csv = CSV.open(out_file, 'a+', write_headers: true, headers: out_headers)
@master_addresses = SmarterCSV.process(in_file.dirname + 'address_data.csv', chunk_size: 10000)

def worker(permits, index)
  permits.each_with_index do |permit, index|
    Parallel.each(@master_addresses, in_processes: 4) do |ma|
      found = @master_addresses.detect { |ma| permit[:case_address] == ma[:address_full] }
      if found
        @out_csv << permit.values
        raise Parallel::Kill
      end
    end
  end
end


permits = SmarterCSV.process(in_file, file_encoding: 'iso-8859-1',  chunk_size: 1000)
Parallel.each_with_index(permits, in_processes: 4, progress: "Processing") do |chunk, index|
  worker(chunk, index)
end


# unmatched_addresses = []
# matched_addresses = 0
#
# master_addresses = CSV.read(in_file.dirname + 'address_data.csv', headers: true, header_converters: :symbol)
# permit_data = CSV.read(in_file, headers: true, header_converters: :symbol, encoding: 'iso-8859-1')
# out_csv = CSV.open(out_file, 'a+', write_headers: true, headers: out_headers)
#
# puts master_addresses[0].inspect
# puts permit_data[0].inspect
# total_permits = permit_data.length
# permit_data.each_with_index do |permit, index|
#   found = master_addresses.detect { |ma| permit[:_case_address] == ma[:address_full] }
#   if found
#     matched_addresses += 1
#   else
#     unmatched_addresses << permit[:_case_address]
#   end
#   puts "#{index + 1} of #{total_permits}"
# end
#
# puts unmatched_addresses.sort
# puts "TOTAL PERMITS: #{total_permits}"
# puts "MATCHED ADDRESSES: #{matched_addresses}"
